{"ast":null,"code":"var _jsxFileName = \"/home/usuario/Projects/Projetos/sd-013-b-project-starwars-planets-search/src/context/starWarsProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './starWarsContext';\nimport fetchPlanets from '../services/fetchAPI';\n\nfunction StarWarsProvider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({\n    filterNames: {\n      name: ''\n    },\n    // ideia de func do meu colega Lucas!\n    filterValues: [{\n      column: 'population',\n      comparison: 'maior que',\n      value: '100000'\n    }]\n  });\n  const [clicked, setClicked] = useState(false);\n  useEffect(() => {\n    async function getPlanets() {\n      const planets = await fetchPlanets();\n      setData(planets);\n    }\n\n    getPlanets();\n  }, []);\n\n  function handleChange({\n    target\n  }) {\n    const {\n      value\n    } = target;\n    setFilters({ ...filters,\n      filterNames: {\n        name: value\n      }\n    });\n  }\n\n  function setColumn({\n    target\n  }) {\n    const {\n      name\n    } = target;\n    const {\n      filterValues\n    } = filters;\n    console.log(filters);\n    const numericFilter = filterValues[filterValues.length - 1];\n    console.log(numericFilter);\n    const {\n      comparison,\n      value\n    } = numericFilter;\n    setFilters({ ...filters,\n      filterValues: [{\n        [name]: target.value,\n        comparison,\n        value\n      }]\n    });\n  }\n\n  function setComparison({\n    target\n  }) {\n    const {\n      name\n    } = target;\n    const {\n      filterValues\n    } = filters;\n    const numericFilter = filterValues[filterValues.length - 1];\n    const {\n      column,\n      value\n    } = numericFilter;\n    setFilters({ ...filters,\n      filterValues: [{\n        column,\n        [name]: target.value,\n        value\n      }]\n    });\n  }\n\n  function setValue({\n    target\n  }) {\n    const {\n      name\n    } = target;\n    const {\n      filterValues\n    } = filters;\n    const numericFilter = filterValues[filterValues.length - 1];\n    const {\n      column,\n      comparison\n    } = numericFilter;\n    setFilters({ ...filters,\n      filterValues: [{\n        column,\n        comparison,\n        [name]: target.value\n      }]\n    });\n  }\n\n  function handleButton() {\n    setClicked(true);\n  }\n\n  const contextValue = {\n    data,\n    filters,\n    clicked,\n    handleChange,\n    setColumn,\n    setComparison,\n    setValue,\n    handleButton\n  };\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.element.isRequired\n};\nexport default StarWarsProvider;","map":{"version":3,"sources":["/home/usuario/Projects/Projetos/sd-013-b-project-starwars-planets-search/src/context/starWarsProvider.js"],"names":["React","useState","useEffect","PropTypes","StarWarsContext","fetchPlanets","StarWarsProvider","children","data","setData","filters","setFilters","filterNames","name","filterValues","column","comparison","value","clicked","setClicked","getPlanets","planets","handleChange","target","setColumn","console","log","numericFilter","length","setComparison","setValue","handleButton","contextValue","propTypes","element","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './starWarsContext';\nimport fetchPlanets from '../services/fetchAPI';\n\nfunction StarWarsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({\n    filterNames: {\n      name: '',\n    },\n    // ideia de func do meu colega Lucas!\n    filterValues: [\n      {\n        column: 'population',\n        comparison: 'maior que',\n        value: '100000',\n      },\n    ],\n  });\n  const [clicked, setClicked] = useState(false);\n\n  useEffect(() => {\n    async function getPlanets() {\n      const planets = await fetchPlanets();\n      setData(planets);\n    }\n    getPlanets();\n  }, []);\n\n  function handleChange({ target }) {\n    const { value } = target;\n    setFilters({ ...filters, filterNames: { name: value } });\n  }\n\n  function setColumn({ target }) {\n    const { name } = target;\n    const { filterValues } = filters;\n    console.log(filters);\n    const numericFilter = filterValues[filterValues.length - 1];\n    console.log(numericFilter);\n    const { comparison, value } = numericFilter;\n    setFilters({ ...filters,\n      filterValues: [{\n        [name]: target.value,\n        comparison,\n        value,\n      }] });\n  }\n\n  function setComparison({ target }) {\n    const { name } = target;\n    const { filterValues } = filters;\n    const numericFilter = filterValues[filterValues.length - 1];\n    const { column, value } = numericFilter;\n    setFilters({ ...filters,\n      filterValues: [{\n        column,\n        [name]: target.value,\n        value,\n      }] });\n  }\n\n  function setValue({ target }) {\n    const { name } = target;\n    const { filterValues } = filters;\n    const numericFilter = filterValues[filterValues.length - 1];\n    const { column, comparison } = numericFilter;\n    setFilters({ ...filters,\n      filterValues: [{\n        column,\n        comparison,\n        [name]: target.value,\n      }] });\n  }\n\n  function handleButton() {\n    setClicked(true);\n  }\n\n  const contextValue = {\n    data,\n    filters,\n    clicked,\n    handleChange,\n    setColumn,\n    setComparison,\n    setValue,\n    handleButton,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ contextValue }>\n      { children }\n    </StarWarsContext.Provider>\n  );\n}\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default StarWarsProvider;\n"]},"metadata":{},"sourceType":"module"}